#
# Copyright 2014-2022 JKOOL, LLC.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#


; TNT4J Common Definitions
{
	source: common.base
	import: tnt4j-common.properties
}

;Stanza used for sources that start with com.jkoolcloud
{
	source: com.jkoolcloud
	like: default.logger
	source.factory.RootSSN: tnt4j-samples

	tracker.default.snapshot.category: DefaultCategory

	event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.BufferedEventSinkFactory
	event.sink.factory.EventSinkFactory: com.jkoolcloud.tnt4j.sink.impl.jul.JULEventSinkFactory
	event.sink.factory.PooledLoggerFactory: com.jkoolcloud.tnt4j.sink.impl.PooledLoggerFactoryImpl
	; For log4j use Log4J Sink Factory below
	; event.sink.factory: com.jkoolcloud.tnt4j.logger.log4j.Log4JEventSinkFactory

	; Throttle control MPS (messages/sec) BPS (bytes/sec)
	; event.sink.factory.RateMaxMPS: 100
	; event.sink.factory.RateMaxBPS: 10000
	; event.sink.factory.RateLimit: true
	; < 0 BLOCK_UNTIL_GRANTED, 0 NO_BLOCK, > 0 BLOCK_UNTIL_TIMEOUT in milliseconds
	; event.sink.factory.RateTimeout: -1

	; Configure default sink filter based on level and time (elapsed/wait)
	event.sink.factory.Filter: com.jkoolcloud.tnt4j.filters.EventLevelTimeFilter
	event.sink.factory.Filter.Level: INFO

	;Uncomment below to enable duplicate event suppression (reduce event storms)
	;event.sink.factory.Filter.SuppressDups: true
	;event.sink.factory.Filter.SuppressTimeSec: 30
	;event.sink.factory.Filter.SuppressCacheSize: 500

	;Use soundex algorithm to detect duplicate messages (very aggressive)
	;event.sink.factory.Filter.SuppressUseSoundex: true

	;Uncomment lines below to filter out events based on elapsed time and wait time
	;Timed event/activities greater or equal to given values will be logged
	;event.sink.factory.Filter.ElapsedUsec: 100
	;event.sink.factory.Filter.WaitUsec: 100

	;event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.SocketEventSinkFactory
	;event.sink.factory.Host: localhost
	;event.sink.factory.Port: 6408
	;event.formatter: com.jkoolcloud.tnt4j.format.JSONFormatter
	activity.listener: com.jkoolcloud.tnt4j.tracker.DefaultActivityListener
	;sink.log.listener: com.jkoolcloud.tnt4j.examples.MySinkLogHandler
}

;Stanza used for sources that start with com.test and uses BufferedEventSinkFactory
;to buffer events and write them asynchronously
{
	source: com.test
	like: default.logger
	source.factory.RootSSN: tnt4j-test

	event.sink.factory: com.jkoolcloud.tnt4j.sink.impl.BufferedEventSinkFactory
	; Default TTL (time to live) for all events written to the sink
	; event.sink.factory.TTL: 16000
	event.sink.factory.EventSinkFactory: com.jkoolcloud.tnt4j.sink.impl.jul.JULEventSinkFactory
	event.sink.factory.PooledLoggerFactory: com.jkoolcloud.tnt4j.sink.impl.PooledLoggerFactoryImpl
	;event.sink.factory.EventSinkFactory: com.jkoolcloud.tnt4j.logger.log4j.Log4JEventSinkFactory

	; Configure default sink filter based on level and time (elapsed/wait)
	event.sink.factory.Filter: com.jkoolcloud.tnt4j.filters.EventLevelTimeFilter
	event.sink.factory.Filter.Level: INFO
	; Default TTL (time to live), this value is set for every event passing via the filter
	; event.sink.factory.Filter.TTL: 16000
	; Uncomment lines below to filter out events based on elapsed time and wait time
	; Timed event/activities greater or equal to given values will be logged
	;event.sink.factory.Filter.ElapsedUsec: 100
	;event.sink.factory.Filter.WaitUsec: 100

	activity.listener: com.jkoolcloud.tnt4j.tracker.DefaultActivityListener
}

;Stanza used for sources that start with org
{
	source: org
	like: com.jkoolcloud
}
